#!/usr/bin/env python3
"""
Agno-Enhanced Demo with app.agno.com Monitoring
UberEats delivery optimization agents with Agno monitoring integration
"""
import os
import sys
import json
import asyncio
import time
from pathlib import Path
from datetime import datetime
from confluent_kafka import Consumer, Producer
from dotenv import load_dotenv

# Agno imports
from agno.agent import Agent
from agno.models.openai import OpenAIChat

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from data.models import GPSEvent

load_dotenv()

class AgnoEnhancedDemo:
    """Demo with Agno monitoring integration"""
    
    def __init__(self):
        # Initialize Agno Agents with monitoring
        self.model = os.getenv('OPENAI_MODEL', 'gpt-4o-mini')
        
        # Route Optimization Agent
        self.route_agent = Agent(
            model=OpenAIChat(id=self.model),
            description="Especialista em otimiza√ß√£o de rotas para o tr√¢nsito de S√£o Paulo. Responde sempre em portugu√™s brasileiro com nomes reais de ruas de SP.",
            name="UberEats Route Optimizer",
            monitoring=True,
            debug_mode=True
        )
        
        # ETA Prediction Agent
        self.eta_agent = Agent(
            model=OpenAIChat(id=self.model),
            description="Especialista em previs√£o de ETA para entregas em S√£o Paulo. Responde sempre em portugu√™s brasileiro.",
            name="UberEats ETA Predictor", 
            monitoring=True,
            debug_mode=True
        )
        
        # Driver Allocation Agent
        self.driver_agent = Agent(
            model=OpenAIChat(id=self.model),
            description="Especialista em aloca√ß√£o de entregadores para o UberEats em S√£o Paulo. Responde sempre em portugu√™s brasileiro.",
            name="UberEats Driver Allocator",
            monitoring=True,
            debug_mode=True
        )
        
        # System Alert Agent
        self.alert_agent = Agent(
            model=OpenAIChat(id=self.model),
            description="Sistema de alertas para anomalias na opera√ß√£o do UberEats S√£o Paulo. Responde sempre em portugu√™s brasileiro.",
            name="UberEats Alert System",
            monitoring=True,
            debug_mode=True
        )
        
        # Kafka producer for publishing results
        producer_config = {
            'bootstrap.servers': os.getenv('KAFKA_BOOTSTRAP_SERVERS'),
            'security.protocol': os.getenv('KAFKA_SECURITY_PROTOCOL'),
            'sasl.mechanisms': os.getenv('KAFKA_SASL_MECHANISMS'),
            'sasl.username': os.getenv('KAFKA_SASL_USERNAME'),
            'sasl.password': os.getenv('KAFKA_SASL_PASSWORD')
        }
        self.producer = Producer(producer_config)
        
        # Metrics
        self.agent_calls_made = 0
        self.results_published = 0
        self.errors_encountered = 0

    async def run_demo(self, max_events=8):
        """Run demo with Agno agent monitoring"""
        print("ü§ñ Demonstra√ß√£o UberEats com Monitoramento Agno")
        print("=" * 70)
        print(f"üìä Processando at√© {max_events} eventos GPS")
        print(f"üì§ Publicando resultados com monitoramento em app.agno.com")
        print(f"üß† Modelo: {self.model}")
        print()
        
        # Kafka consumer configuration
        consumer_config = {
            'bootstrap.servers': os.getenv('KAFKA_BOOTSTRAP_SERVERS'),
            'security.protocol': os.getenv('KAFKA_SECURITY_PROTOCOL'),
            'sasl.mechanisms': os.getenv('KAFKA_SASL_MECHANISMS'),
            'sasl.username': os.getenv('KAFKA_SASL_USERNAME'),
            'sasl.password': os.getenv('KAFKA_SASL_PASSWORD'),
            'group.id': 'agno-enhanced-demo',
            'auto.offset.reset': 'earliest',
            'enable.auto.commit': True
        }
        
        consumer = Consumer(consumer_config)
        consumer.subscribe(['kafka-gps-data'])
        
        print("üì° Processando dados GPS com agentes Agno...")
        print()
        
        processed = 0
        
        try:
            while processed < max_events:
                msg = consumer.poll(timeout=3.0)
                
                if msg is None:
                    continue
                    
                if msg.error():
                    continue
                
                try:
                    # Parse GPS data
                    gps_data = json.loads(msg.value().decode('utf-8'))
                    gps_event = GPSEvent.from_kafka_message(gps_data)
                    processed += 1
                    
                    print(f"üìç Evento GPS #{processed}")
                    print(f"   üöó Motorista: {str(gps_event.driver_id)[:8]}...")
                    print(f"   üìç Zona: {gps_event.zone_name} ({gps_event.zone_type})")
                    print(f"   üèÉ Velocidade: {gps_event.speed_kph} km/h | Est√°gio: {gps_event.trip_stage}")
                    print(f"   üö¶ Tr√¢nsito: {gps_event.traffic_density}")
                    
                    # Process with Agno agents
                    await self._process_with_agno_agents(gps_event)
                    
                    print()
                    await asyncio.sleep(1.5)
                    
                except Exception as e:
                    print(f"‚ùå Erro ao processar evento GPS: {e}")
                    self.errors_encountered += 1
                    
        finally:
            consumer.close()
            self.producer.flush()
            await self._print_summary()

    async def _process_with_agno_agents(self, gps_event: GPSEvent):
        """Process GPS event with Agno-monitored agents"""
        
        # Route Optimization Agent
        if gps_event.traffic_density in ['heavy', 'severe'] or gps_event.speed_kph > 60:
            route_prompt = f"""
Otimize a rota para este cen√°rio de entrega:
- Zona: {gps_event.zone_name}
- Velocidade atual: {gps_event.speed_kph} km/h
- Tr√¢nsito: {gps_event.traffic_density}
- Clima: {gps_event.weather_condition}

Forne√ßa UMA recomenda√ß√£o espec√≠fica de rota com nomes de ruas de S√£o Paulo (m√°x 40 palavras em portugu√™s).
"""
            route_response = self.route_agent.run(route_prompt)
            
            route_result = {
                'optimization_id': f"route_{int(time.time())}",
                'timestamp': datetime.now().isoformat(),
                'driver_id': gps_event.driver_id,
                'zone': gps_event.zone_name,
                'optimization': route_response.content.strip(),
                'priority': 'high' if gps_event.traffic_density == 'heavy' else 'medium',
                'estimated_time_savings': '3-8 minutes'
            }
            
            await self._publish_to_topic('route-optimizations', route_result)
            print(f"   üó∫Ô∏è Agente de Rota (Agno): {route_response.content.strip()[:60]}... (publicado)")
            self.agent_calls_made += 1
        
        # ETA Prediction Agent
        elif gps_event.trip_stage in ['to_pickup', 'to_destination'] and gps_event.speed_kph > 5:
            eta_prompt = f"""
Com base nos dados de GPS, forne√ßa uma previs√£o de ETA (tempo estimado de chegada):
- Velocidade atual: {gps_event.speed_kph} km/h
- Zona: {gps_event.zone_name}
- Tr√¢nsito: {gps_event.traffic_density}
- Est√°gio da viagem: {gps_event.trip_stage}

Forne√ßa uma estimativa realista de ETA em minutos com breve justificativa (m√°x 30 palavras em portugu√™s).
"""
            eta_response = self.eta_agent.run(eta_prompt)
            
            eta_result = {
                'prediction_id': f"eta_{int(time.time())}",
                'timestamp': datetime.now().isoformat(),
                'driver_id': gps_event.driver_id,
                'zone': gps_event.zone_name,
                'prediction': eta_response.content.strip(),
                'confidence': 0.85,
                'factors': {
                    'current_speed': gps_event.speed_kph,
                    'traffic_density': gps_event.traffic_density,
                    'weather': gps_event.weather_condition
                }
            }
            
            await self._publish_to_topic('eta-predictions', eta_result)
            print(f"   ‚è±Ô∏è Agente ETA (Agno): {eta_response.content.strip()[:60]}... (publicado)")
            self.agent_calls_made += 1
        
        # Driver Allocation Agent
        elif gps_event.trip_stage == 'idle' and gps_event.zone_type in ['business_district', 'commercial']:
            driver_prompt = f"""
Aloca√ß√£o de entregador para motorista inativo:
- Zona: {gps_event.zone_name} ({gps_event.zone_type})
- Hor√°rio: {datetime.now().strftime('%H:%M')}
- Tr√¢nsito: {gps_event.traffic_density}

Recomende a melhor estrat√©gia de aloca√ß√£o para UberEats em S√£o Paulo (m√°x 30 palavras em portugu√™s).
"""
            driver_response = self.driver_agent.run(driver_prompt)
            
            driver_result = {
                'allocation_id': f"driver_{int(time.time())}",
                'timestamp': datetime.now().isoformat(),
                'driver_id': gps_event.driver_id,
                'zone': gps_event.zone_name,
                'allocation': driver_response.content.strip(),
                'priority_score': 0.75,
                'expected_orders': 2
            }
            
            await self._publish_to_topic('driver-allocations', driver_result)
            print(f"   üéØ Agente de Motorista (Agno): {driver_response.content.strip()[:60]}... (publicado)")
            self.agent_calls_made += 1
        
        # System Alert for anomalies
        if gps_event.anomaly_flag:
            alert_prompt = f"""
Gere um alerta para anomalia detectada:
- Tipo de anomalia: {gps_event.anomaly_flag}
- Zona: {gps_event.zone_name}
- Motorista: {str(gps_event.driver_id)[:8]}
- Detalhes: {gps_event.anomaly_details or 'Sem detalhes adicionais'}

Forne√ßa uma descri√ß√£o do alerta e a√ß√£o recomendada (m√°x 50 palavras em portugu√™s).
"""
            alert_response = self.alert_agent.run(alert_prompt)
            
            alert_result = {
                'alert_id': f"anomaly_{int(time.time())}",
                'timestamp': datetime.now().isoformat(),
                'severity': 'high',
                'type': gps_event.anomaly_flag,
                'driver_id': gps_event.driver_id,
                'zone': gps_event.zone_name,
                'details': alert_response.content.strip(),
                'recommended_action': 'Investigar comportamento do motorista e precis√£o da localiza√ß√£o'
            }
            
            await self._publish_to_topic('system-alerts', alert_result)
            print(f"   üö® Sistema de Alerta (Agno): alerta {gps_event.anomaly_flag} emitido (publicado)")
            self.agent_calls_made += 1

    async def _publish_to_topic(self, topic: str, data: dict):
        """Publish agent result to Kafka topic"""
        try:
            message = json.dumps(data)
            self.producer.produce(topic, value=message)
            self.results_published += 1
        except Exception as e:
            print(f"   ‚ùå Falha ao publicar no t√≥pico {topic}: {e}")
            self.errors_encountered += 1

    async def _print_summary(self):
        """Print demo summary"""
        print("üéØ Resumo da Demonstra√ß√£o com Agno")
        print("-" * 50)
        print(f"ü§ñ Chamadas dos Agentes Agno: {self.agent_calls_made}")
        print(f"üì§ Resultados Publicados: {self.results_published}")
        print(f"‚ùå Erros: {self.errors_encountered}")
        
        if self.agent_calls_made > 0:
            success_rate = ((self.agent_calls_made - self.errors_encountered) / self.agent_calls_made) * 100
            print(f"‚úÖ Taxa de Sucesso: {success_rate:.1f}%")
        
        print()
        print("üìä Resultados publicados nos t√≥picos:")
        print("   ‚Ä¢ eta-predictions")
        print("   ‚Ä¢ route-optimizations") 
        print("   ‚Ä¢ driver-allocations")
        print("   ‚Ä¢ system-alerts")
        print()
        print("üí° Verifique app.agno.com/sessions para ver a atividade dos agentes!")
        print("üì± Dashboard local: streamlit run interface/main.py")

async def main():
    """Main entry point"""
    demo = AgnoEnhancedDemo()
    await demo.run_demo(max_events=8)

if __name__ == "__main__":
    print("üöö Demonstra√ß√£o UberEats com Monitoramento Agno")
    print(f"Iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Demonstra√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro na demonstra√ß√£o: {e}")