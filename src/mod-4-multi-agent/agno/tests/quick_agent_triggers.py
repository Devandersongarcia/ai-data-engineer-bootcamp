#!/usr/bin/env python3
"""
Quick agent triggers - Simple examples to activate specific agents
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from agno.agent import Agent
from agno.models.openai import OpenAIChat

load_dotenv()

def trigger_eta_agent():
    """Quick ETA agent trigger"""
    print("‚è±Ô∏è Triggering ETA Agent...")
    
    eta_agent = Agent(
        model=OpenAIChat(id="gpt-4o-mini"),
        description="Especialista em previs√£o de tempo de chegada para entregas em S√£o Paulo",
        name="UberEats ETA Predictor",
        monitoring=True
    )
    
    response = eta_agent.run("""
    Calcule o ETA para esta entrega urgente:
    - De Vila Madalena para Itaim Bibi  
    - Dist√¢ncia: 4.2km
    - Tr√¢nsito: muito pesado (rush hour)
    - Hor√°rio: 18:30 (sexta-feira)
    - Chuva moderada
    
    Quanto tempo para chegar? (resposta em portugu√™s, m√°x 20 palavras)
    """)
    
    print(f"‚úÖ ETA Response: {response.content}")
    return response

def trigger_driver_allocation():
    """Quick driver allocation trigger"""
    print("\nüöó Triggering Driver Allocation Agent...")
    
    allocation_agent = Agent(
        model=OpenAIChat(id="gpt-4o-mini"),
        description="Especialista em aloca√ß√£o inteligente de motoristas para zonas de S√£o Paulo",
        name="UberEats Driver Allocator",
        monitoring=True
    )
    
    response = allocation_agent.run("""
    URGENTE - Alocar motoristas agora:
    - 20 motoristas dispon√≠veis
    - ALTA DEMANDA: Vila Madalena (15 pedidos), Pinheiros (12 pedidos)
    - DEMANDA NORMAL: Itaim Bibi (4 pedidos), Moema (2 pedidos)
    - Hor√°rio: 20:00 (sexta-feira)
    
    Como distribuir os motoristas? (resposta em portugu√™s, m√°x 25 palavras)
    """)
    
    print(f"‚úÖ Allocation Response: {response.content}")
    return response

def trigger_system_alert():
    """Quick system alert trigger"""
    print("\nüö® Triggering System Alert Agent...")
    
    alert_agent = Agent(
        model=OpenAIChat(id="gpt-4o-mini"),
        description="Especialista em monitoramento e alertas cr√≠ticos do sistema UberEats",
        name="UberEats System Monitor",
        monitoring=True
    )
    
    response = alert_agent.run("""
    üö® SITUA√á√ÉO CR√çTICA DETECTADA:
    - Motorista ID: abc123
    - Localiza√ß√£o: Avenida Paulista
    - PARADO h√° 60 minutos
    - Pedido ativo h√° 2 horas
    - Cliente reclamando
    - Sem resposta do motorista h√° 45min
    
    Que a√ß√£o tomar AGORA? (resposta urgente em portugu√™s, m√°x 20 palavras)
    """)
    
    print(f"üö® Alert Response: {response.content}")
    return response

def trigger_route_optimization():
    """Quick route optimization trigger"""
    print("\nüó∫Ô∏è Triggering Route Optimization Agent...")
    
    route_agent = Agent(
        model=OpenAIChat(id="gpt-4o-mini"),
        description="Especialista em otimiza√ß√£o de rotas para o tr√¢nsito de S√£o Paulo",
        name="UberEats Route Optimizer",
        monitoring=True
    )
    
    response = route_agent.run("""
    OTIMIZAR ROTA URGENTE:
    - Sa√≠da: Vila Olimpia
    - Destino: Centro (Pra√ßa da Rep√∫blica)
    - Tr√¢nsito: CA√ìTICO (Marginal parada)
    - Hor√°rio: 18:45 (rush extremo)
    - Entrega em 30min MAX
    
    Melhor rota alternativa? (nomes de ruas de SP, m√°x 25 palavras)
    """)
    
    print(f"üó∫Ô∏è Route Response: {response.content}")
    return response

def main():
    """Run quick agent triggers"""
    print("üöÄ Quick Agent Triggers")
    print("=" * 40)
    
    # Trigger each agent type with realistic scenarios
    trigger_eta_agent()
    trigger_driver_allocation()
    trigger_system_alert()
    trigger_route_optimization()
    
    print(f"\nüéØ All agents triggered successfully!")
    print(f"üìä Check dashboard: http://localhost:8503")  
    print(f"üîç Check Agno: app.agno.com/sessions")

if __name__ == "__main__":
    main()